#define _CRT_SECURE_NO_WARNINGS 1

#include <stdio.h>

//int main()
//{
//	int a = 5 / 2;//除号得到的是商
//	printf("%d\n", a);
//	a = 5 % 2;//取余得到的是余数
//	printf("%d\n", a);
//	return 0;
//}

//int main()
//{
//	int a = 16;
//	//>>--右移操作符
//	//移动的是二进制位
//	//10000-->01000
//	int b = a >> 1;
//	printf("%d\n", b);
//	return 0;
//}

//int main()
//{
//	int a = -1;
//	//整数的二进制表示有：原码、反码、补码
//	//存储到内存中的是补码
//	//10000000000000000000001--  -1的原码
//	//11111111111111111111110--  -1的反码 符号位不变 其他部分按位取反
//	//11111111111111111111111--  -1的补码 反码加1得到补码
//	int b = a >> 1;
//	printf("%d\n", b);
//	return 0;
//}

//int main()
//{
//	int a = 5;
//	int b = a << 1;
//	printf("%d\n", b);
//	return 0;
//}

//int mian()
//{
//	//&--按二进制位与
//	/*int a = 5;
//	int b = 3;
//	int c = a & b;*/
//	//101
//	//011
//	//001
//	//有0则为0
//	/*printf("%d\n", c);*/
//
//	//按二进位或  有1则为1
//	/*int a = 3;
//	int b = 5;
//	int c = a | b;
//	printf("%d\n", c);*/
//
//	//按位异或^ 依旧是二进制位
//	//对应的二进制位相同为0，相异为1
//	//011 101-->110
//	int a = 3;
//	int b = 5;
//	int c = a | b;
//	printf("%d\n", c);
//	return 0;
//}

//int main()
//{
//	//创建第三变量交换两个整形的值
//	/*int a = 3;
//	int b = 5;
//	int temp = 0;
//	printf("before: a = %d b = %d\n", a, b);
//	temp = a;
//	a = b;
//	b = temp;
//	printf("after: a = %d b = %d\n", a, b);*/
//
//	//不创建第三方变量交换两个变量的值
//	//加减法 可能会溢出
//	/*int a = 3;
//	int b = 5;
//	printf("before: a = %d b = %d\n", a, b);
//	a = a - b;
//	b = a + b;
//	a = b - a;
//	printf("after: a = %d b = %d\n", a, b); */
//
//	//异或的方法 这种方法不会产生溢出
//	int a = 3;
//	int b = 5;
//	printf("before: a = %d b = %d\n", a, b);
//	a = a ^ b;
//	b = a ^ b;
//	a = a ^ b;
//	printf("after: a = %d b = %d\n", a, b);
//	return 0;
//}

//求一个整数存储在内存中二进制位中1的个数
//int main()
//{
//	int num = 0;
//	int count = 0;
//	scanf("%d", &num);
//	//32bit位
//	// 当num&1当二进制位最后一位是1则为1 最后一位是0则为0
//	int i = 0;
//	for (i = 0; i < 32; i++)
//	{
//		if (1 == (num >> i) & 1)
//			count++;
//	}
//
//	//统计num的补码中有几个1
//	//以下的算法只对整数有用 负数就不行
//	/*while (num != 0)
//	{
//		if (num % 2 == 1)
//			count++;
//		num = num / 2;
//	}*/
//
//	printf("%d\n", count);
//	return 0;
//}

//int main()
//{
//	int a = 10;
//	a = a + 2;
//	a += 2;//复合操作符
//
//	a = a >> 1;
//	a >>= 1;
//
//	a = a & 1;
//	a &= 1;
//	return 0;
//}

//int main()
//{
//	int a = 10;
//	int* p = &a;//取地址操作符
//	*p = 20;//解引用操作符 通过p里面的值找到对象a
//	return 0;
//}

//int main()
//{
//	//int a = 10;
//	//char c = 'u';
//	//char* p = &c;
//	//int arr[10] = { 0 };
//	////sizeof计算的是变量所占内存空间所占大小。单位是字节
//	//printf("%d\n", sizeof(a));//4
//	//printf("%d\n", sizeof(int));//这样算的是一样的 sizeof(数组名)==sizeof(变量名) 变量名的括号可以省掉结果不变，类型的外面的括号不可以去掉不然会报错
//
//	//printf("%d\n", sizeof(c));//1
//	//printf("%d\n", sizeof(p));//4
//
//	//printf("%d\n", sizeof(arr));//40
//	//printf("%d\n", sizeof(int [10]));//数组也是有类型的 将数组名去掉就是数组的类型
//	short s = 0;
//	int a = 10;
//	printf("%d\n", sizeof(s = a + 5));//a+5算出来的值最后放在了short里面，只能是两个字节，这个表达式s说的算
//	printf("%d\n", s);//sizeof()里面的值是不参与运算的
//	return 0;
//}

//int main()
//{
//	int a = 11;
//	a = a | (1 << 2);
//	printf("%d\n", a);
//	//0000000000000000000000000000001011  要把第三位变成1
//	//0000000000000000000000000000000100
//	//0000000000000000000000000000001111
//	a = a & (~(1 << 2));
//	//0000000000000000000000000000001111
//	// 111111111111111111111111111111011  将下面的那个按位取反
//	// 000000000000000000000000000000100  将1左移两位
//	// 000000000000000000000000000001011
//	printf("%d\n", a);
//	//int a = 0;
//	////按（2进制）位取反
//	////00000000000000000000000000000000
//	////11111111111111111111111111111111 补码 按位取反之后的结果
//	////11111111111111111111111111111110 反码
//	////00000000000000000000000000000001 原码 -1
//	//printf("%d\n", ~a);
//	return 0;
//}

int main()
{
	int a = 10;
	printf("%d\n", ++a);//前置++，先++，后使用
	a = 10;
	printf("%d\n", a++);//后置++，先使用，后++
	return 0;
}